import React, { useState } from "react";
import {
    Button,
    Dialog,
    DialogHeader,
    DialogBody,
    DialogFooter,
    Input,
    Select,
    Option,
    Textarea,
} from "@material-tailwind/react";
import Cookies from "js-cookie";

import { Expenses } from "../../../../utils/Controllers/Expenses";
import { Alert } from "../../../../utils/Alert";

export default function WarehouseExpensesCreate({ refresh }) {
    const [open, setOpen] = useState(false);
    const [loading, setLoading] = useState(false);

    const [form, setForm] = useState({
        amount: "",
        method: "cash",
        location_id: Cookies?.get('ul_nesw'),
        note: "",
        created_by: Cookies?.get('us_nesw'),
    });

    const handleOpen = () => setOpen(!open);

    // üîπ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    const formatNumber = (value) => {
        const cleaned = value.replace(/\D/g, ""); // —É–¥–∞–ª—è–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        if (!cleaned) return "";
        return cleaned.replace(/\B(?=(\d{3})+(?!\d))/g, " ");
    };

    const handleAmountChange = (e) => {
        const value = e.target.value;
        const formatted = formatNumber(value);
        setForm((prev) => ({
            ...prev,
            amount: formatted,
        }));
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm((prev) => ({ ...prev, [name]: value }));
    };

    const CreateExpenses = async () => {
        try {
            setLoading(true);
            const payload = {
                ...form,
                amount: Number(form.amount.replace(/\s/g, "")) || 0,
            };

            const response = await Expenses.CreateExpenses(payload);
            Alert("Muvaffaqiyatli yaratildi ", "success");
            setOpen(false);
            refresh()
        } catch (error) {
            Alert(`Xatolik yuz berdi ${error?.response?.data?.message}`, "error");
        } finally {
            setLoading(false);
        }
    };

    return (
        <>
            <Button color="green" onClick={handleOpen}>
                –°–æ–∑–¥–∞—Ç—å –†–∞—Å—Ö–æ–¥
            </Button>

            <Dialog open={open} handler={handleOpen} size="sm">
                <DialogHeader>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥</DialogHeader>
                <DialogBody divider>
                    <div className="flex flex-col gap-4">
                        <Input
                            label="–°—É–º–º–∞"
                            name="amount"
                            value={form.amount}
                            onChange={handleAmountChange}
                            placeholder=""
                        />

                        <Select
                            label="–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã"
                            value={form.method}
                            onChange={(val) => setForm((p) => ({ ...p, method: val }))}
                        >
                            <Option value="cash">–ù–∞–ª–∏—á–Ω—ã–µ</Option>
                            <Option value="card">–ö–∞—Ä—Ç–∞</Option>
                            <Option value="transfer">–ë–∞–Ω–∫</Option>
                        </Select>

                        <Textarea
                            label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                            name="note"
                            value={form.note}
                            onChange={handleChange}
                        />
                    </div>
                </DialogBody>

                <DialogFooter>
                    <Button variant="text" color="gray" onClick={handleOpen} className="mr-2">
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button color="green" onClick={CreateExpenses} disabled={loading}>
                        {loading ? "–°–æ–∑–¥–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å"}
                    </Button>
                </DialogFooter>
            </Dialog>
        </>
    );
}
